import json
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

# Инициализация бота и диспетчера
bot = Bot(token="7885276667:AAFWWj7v5zYEZv8_vX6kTrCJUk4Cj0PiqDo")
dp = Dispatcher()

# Хранилище материалов
materials = {}

# Функция для сохранения данных
def save_materials():
    with open("materials.json", "w", encoding="utf-8") as f:
        json.dump(materials, f, ensure_ascii=False, indent=4)

# Функция для загрузки данных
def load_materials():
    global materials
    try:
        with open("materials.json", "r", encoding="utf-8") as f:
            materials = json.load(f)
    except FileNotFoundError:
        materials = {}


load_materials() #Загрузка файлов в json формате для отображения.

roles = {
    'admin': [1040578529, 1849102628],  #Добавление ролей:ученик и админ. В админы записывается id конкретного пользователя.
    'students': []
}


student_menu = ReplyKeyboardMarkup(  #Создние 'клавиатуры' для учеников
    keyboard=[
        [KeyboardButton(text="Выбрать тему")] #Кнопки, которые будут отображаться под клавиатурой у ученика.
    ],
    resize_keyboard=True #Размер кнопок и клавиатуры подстраивается под количество элементов.
)


admin_menu = ReplyKeyboardMarkup( #Создние 'клавиатуры' для администраторов
    keyboard=[
        [KeyboardButton(text="Выбрать тему")], #Кнопки, которые будут отображаться под клавиатурой у администратора.
        [KeyboardButton(text="Добавить тему")],
    ],
    resize_keyboard=True #Размер кнопок и клавиатуры подстраивается под количество элементов.
)

admin_temp_data = {} #временные данные для админов


# Хендлер команды /start
@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id #Получение id пользователя

    if user_id in roles['admin']: #Проверка на администратора, если да, то появляются кнопки для администратора.
        await message.answer("Привет, администратор!", reply_markup=admin_menu)
    else:
        if user_id not in roles['students']: #Если id нет в админах, то появляются кнопки для пользователя.
            roles['students'].append(user_id)
        await message.answer("Привет, ученик! Выбирай тему:", reply_markup=student_menu)

# Хендлер для выбора темы
@dp.message(F.text == "Выбрать тему")
async def choose_topic(message: Message):
    if not materials:
        await message.answer("Темы пока не добавлены.")
        return

    topics_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=topic)] for topic in materials.keys()
        ] + [[KeyboardButton(text="Назад")]],
        resize_keyboard=True
    )
    await message.answer("Выберите тему:", reply_markup=topics_kb)

# Хендлер для показа материалов по выбранной теме
@dp.message(lambda msg: msg.text in materials.keys())
async def show_material(message: Message):
    topic = message.text #Название темы - сообщение, отправленное пользователем
    topic_data = materials.get(topic, {}) #Извлечение данных из выбранной темы

    # Показать материалы самой темы
    if topic_data.get("Материалы"):
        await message.answer(f"Материалы для темы '{topic}':")
        for material in topic_data["Материалы"]:
            text = material.get("text", "") #Получение сообщений
            photo = material.get("photo", None) #Получение фото

            if text:  # Если есть текст, то бот отправляет его
                await message.answer(text)
            if photo:  # Если есть фото, то бот отправляет его
                await bot.send_photo(message.chat.id, photo)
    else:
        await message.answer(f"В теме '{topic}' пока нет материалов.")

    # Проверить наличие подтем
    if topic_data.get("Подтемы"):
        subtopics_kb = ReplyKeyboardMarkup( #Создание клавиатуры для вывода названий подтем
            keyboard=[
                [KeyboardButton(text=sub)] for sub in topic_data["Подтемы"].keys()
            ] + [[KeyboardButton(text="Назад")]],
            resize_keyboard=True
        )
        await message.answer(f"В теме '{topic}' есть подтемы. Выберите подтему:", reply_markup=subtopics_kb)
        return

    # Возврат в главное меню
    user_id = message.from_user.id #Получение id пользователя
    menu = admin_menu if user_id in roles['admin'] else student_menu #Вывод соответствующей клавиатуры, смотря на роль пользователя
    await message.answer("Возвращаемся в меню.", reply_markup=menu)



@dp.message(lambda msg: any(msg.text in topic_data["Подтемы"] for topic_data in materials.values()))
async def show_subtopic_material(message: Message):
    subtopic_name = message.text

    for topic_name, topic_data in materials.items():
        if subtopic_name in topic_data.get("Подтемы", {}):
            subtopic_data = topic_data["Подтемы"][subtopic_name]

            # Отображение материалов подтемы
            if subtopic_data.get("materials"):
                await message.answer(f"Материалы для подтемы '{subtopic_name}':")
                for material in subtopic_data["materials"]:
                    if material["type"] == "text":
                        await message.answer(material["content"])
                    elif material["type"] == "photo":
                        await bot.send_photo(message.chat.id, material["content"])
            else:
                await message.answer(f"В подтеме '{subtopic_name}' пока нет материалов.")

            break

    # Возврат в меню подтем
    subtopics_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=sub)] for sub in topic_data["Подтемы"].keys()
        ] + [[KeyboardButton(text="Назад")]],
        resize_keyboard=True
    )
    await message.answer("Выберите другую подтему или вернитесь назад.", reply_markup=subtopics_kb)



# Хендлер для кнопки "Назад"
@dp.message(F.text == "Назад")
async def back_to_main_menu(message: Message):
    user_id = message.from_user.id
    menu = admin_menu if user_id in roles['admin'] else student_menu
    await message.answer("Возвращаемся в главное меню.", reply_markup=menu)

# Хендлер для добавления темы
@dp.message(F.text == "Добавить тему")
async def add_topic(message: Message):
    user_id = message.from_user.id
    if user_id not in roles['admin']:
        await message.answer("У вас нет прав администратора.")
        return

    admin_temp_data[user_id] = {"step": "waiting_for_topic_name"}
    await message.answer("Введите название новой темы:")

@dp.message(lambda msg: admin_temp_data.get(msg.from_user.id, {}).get("step") == "waiting_for_topic_name")
async def handle_topic_name(message: Message):
    user_id = message.from_user.id
    topic_name = message.text.strip()

    if topic_name in materials:
        await message.answer("Такая тема уже существует. Придумайте другое название.")
        return

    materials[topic_name] = {"Материалы": [], "Подтемы": {}}
    save_materials()
    admin_temp_data[user_id] = {"topic_name": topic_name, "step": "asking_subtopics"}
    await message.answer(f"Тема '{topic_name}' создана. Укажите количество подтем или напишите 'нет', если подтем нет:")

@dp.message(lambda msg: admin_temp_data.get(msg.from_user.id, {}).get("step") == "asking_subtopics")
async def handle_subtopics_count(message: Message):
    user_id = message.from_user.id
    temp_data = admin_temp_data[user_id]
    topic_name = temp_data["topic_name"]

    # Если введено "нет", переходим к добавлению материалов
    if message.text.lower() == "нет":
        temp_data["step"] = "adding_material_content"
        await message.answer(f"Тема '{topic_name}' будет без подтем. Добавьте материалы (текст/фото). Напишите 'всё' для завершения.")
        return

    # Проверка: введено число или нет
    if not message.text.isdigit():
        await message.answer("Пожалуйста, введите число подтем или напишите 'нет', если подтем нет.")
        return

    subtopics_count = int(message.text)

    # Проверка на некорректное количество подтем
    if subtopics_count < 2:
        await message.answer("Количество подтем должно быть не меньше 2. Введите число больше или равное 2, либо напишите 'нет', если подтем нет.")
        return

    # Если всё корректно, переходим к добавлению названий подтем
    temp_data["subtopics_count"] = subtopics_count
    temp_data["current_subtopic"] = 1
    temp_data["step"] = "adding_subtopic_name"
    await message.answer(f"Введите название подтемы №{temp_data['current_subtopic']}:")


@dp.message(lambda msg: admin_temp_data.get(msg.from_user.id, {}).get("step") == "adding_subtopic_name")
async def handle_subtopic_name(message: Message):
    user_id = message.from_user.id
    temp_data = admin_temp_data[user_id]
    topic_name = temp_data["topic_name"]

    subtopic_name = message.text.strip()
    if subtopic_name in materials[topic_name]["Подтемы"]:
        await message.answer("Подтема с таким названием уже существует. Укажите другое название.")
        return

    materials[topic_name]["Подтемы"][subtopic_name] = {"text": "", "photo": None}
    save_materials()
    temp_data["current_subtopic_name"] = subtopic_name
    temp_data["step"] = "adding_subtopic_content"
    await message.answer(f"Добавьте материал для подтемы '{subtopic_name}' (текст/фото). Напишите 'всё' для завершения.")

@dp.message(lambda msg: admin_temp_data.get(msg.from_user.id, {}).get("step") == "adding_subtopic_content")
async def handle_subtopic_content(message: Message):
    user_id = message.from_user.id
    temp_data = admin_temp_data[user_id]
    topic_name = temp_data["topic_name"]
    subtopic_name = temp_data["current_subtopic_name"]

    # Завершение ввода подтем
    if message.text and message.text.lower() == "всё":
        current = temp_data.get("current_subtopic", 1)
        if current < temp_data.get("subtopics_count", 0):
            temp_data["current_subtopic"] += 1
            temp_data["step"] = "adding_subtopic_name"
            await message.answer(f"Введите название подтемы №{temp_data['current_subtopic']}:")
        else:
            temp_data["step"] = "adding_main_material"
            await message.answer(f"Подтемы для темы '{topic_name}' добавлены. Теперь добавьте общий материал для темы.")
        return

    # Добавление текста/фото для подтемы
    subtopic_data = materials[topic_name]["Подтемы"][subtopic_name]
    if "materials" not in subtopic_data:
        subtopic_data["materials"] = []

    if message.text:
        subtopic_data["materials"].append({"type": "text", "content": message.text})
        await message.answer(f"Текст для подтемы '{subtopic_name}' добавлен. Напишите 'всё' для завершения или добавьте ещё материал.")
    elif message.photo:
        photo_file_id = message.photo[-1].file_id
        subtopic_data["materials"].append({"type": "photo", "content": photo_file_id})
        await message.answer_photo(photo=photo_file_id, caption="Фото добавлено. Напишите 'всё' для завершения или добавьте ещё материал.")
    else:
        await message.answer("Добавьте текст или фото, либо напишите 'всё' для завершения.")



# Хендлер для добавления материала (текст/фото)
@dp.message(lambda msg: admin_temp_data.get(msg.from_user.id, {}).get("step") == "adding_material_content") #Добавление материала в тему без подтем
async def handle_material_content(message: Message):
    user_id = message.from_user.id #Получение id пользователя
    temp_data = admin_temp_data[user_id] #Временные данные администратора
    topic_name = temp_data["topic_name"] #Получение названия пользователя

    # Проверка на текстовое сообщение
    if message.text:
        if message.text.lower() == "всё":
            del admin_temp_data[user_id] #Удаление временных данных администратора
            await message.answer(f"Тема '{topic_name}' успешно сохранена.", reply_markup=admin_menu) #Возвращение в главное меню
            return

        # Добавляем только текст
        if message.text.strip():
            materials[topic_name]["Материалы"].append({"text": message.text.strip(), "photo": None}) #Добавление материала в данную тему
            save_materials() #Сохранение данных json файла
            await message.answer("Материал добавлен. Напишите 'всё' для завершения или добавьте ещё материал.")
    else:
        # Если это фото
        if message.photo:
            photo_file_id = message.photo[-1].file_id  # Получаем самый большой размер фото
            materials[topic_name]["Материалы"].append({"text": None, "photo": photo_file_id}) #Добавление фото в данную тему
            save_materials() #Сохранение материала
            await message.answer_photo(photo=photo_file_id,
                                       caption="Фото добавлено. Напишите 'всё' для завершения или добавьте ещё материал.")

@dp.message(lambda msg: admin_temp_data.get(msg.from_user.id, {}).get("step") == "adding_main_material")
async def handle_main_material(message: Message):
    user_id = message.from_user.id
    temp_data = admin_temp_data[user_id]
    topic_name = temp_data["topic_name"]

    if message.text and message.text.lower() == "всё":
        del temp_data
        await message.answer(f"Тема '{topic_name}' успешно сохранена.", reply_markup=admin_menu)
        return

    if message.text:
        materials[topic_name]["Материалы"].append({"text": message.text.strip(), "photo": None})
        save_materials()
        await message.answer("Материал добавлен. Напишите 'всё' для завершения или добавьте ещё материал.")
    elif message.photo:
        photo_file_id = message.photo[-1].file_id
        materials[topic_name]["Материалы"].append({"text": None, "photo": photo_file_id})
        save_materials()
        await message.answer_photo(photo=photo_file_id, caption="Фото добавлено. Напишите 'всё' для завершения или добавьте ещё материал.")
    else:
        await message.answer("Добавьте текст или фото, либо напишите 'всё' для завершения.")



# Запуск бота
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())




